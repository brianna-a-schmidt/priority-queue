#------------------------------------------------------------------------------
# Basic
#------------------------------------------------------------------------------
#
# The CMake file MUST be named as "CMakeLists.txt".

# Setup the minimum version required of CMake to generate the Makefile
cmake_minimum_required (VERSION 2.8)

# Raises a FATAL_ERROR if version < 2.8
cmake_minimum_required (VERSION 2.8 FATAL_ERROR)

# We setup the name for our project. After we do that, this will change some
# directories naming convention generated by CMake. We can send the LANG of
# code as second param
project (alphabetize CXX)


# Set the project source dir (just convention)
set( alphabetize_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} )
set( alphabetize_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR} )

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ../bin)

set(CMAKE_CXX_STANDARD 14)
# It's useful to setup the current version of our code in the build system
# using a `semver` style
set (alphabetize_VERSION_MAJOR 1)
set (alphabetize_VERSION_MINOR 0)
set (alphabetize_VERSION_PATCH 0)

# Send the variables (version number) to source code header
#configure_file (
#  "${PROJECT_SOURCE_DIR}/config/config.h.in"
#  "${PROJECT_BINARY_DIR}/config.h"
#)

# Include Directories
# In GCC, this will invoke the "-I" command
include_directories( include )

# Where are the additional libraries installed? Note: provide includes
# path here, subsequent checks will resolve everything else
set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake/modules/" )




# Set a normal, cache, or environment variable to a given value.
# If the PARENT_SCOPE option is given the variable will be set in the scope
# above the current scope.
# `set(<variable> <value>... [PARENT_SCOPE])`

# How to reference variables inside quoted and unquoted arguments
# A variable reference is replaced by the value of the variable, or by the
# empty string if the variable is not set


# Lists
# Setup the list of source files
set( ALPHABETIZE_SOURCES
  src/Node.cpp
  src/LinkedSortedList.cpp
  src/PrecondViolatedExcep.cpp
  src/SL_PriorityQueue.cpp
  test/main.cpp
)

# Calls the compiler
#
# ${PROJECT_NAME} refers to Learn_CMake
add_executable( ${PROJECT_NAME} ${ALPHABETIZE_SOURCES})

# Link the libraries
target_link_libraries( ${PROJECT_NAME} ${LIBS} m )

# Where are the additional libraries installed? Note: provide includes
# path here, subsequent checks will resolve everything else
set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMake/modules/" )

# Compiler Condition (gcc ; g++)
if ( "${CMAKE_C_COMPILER_ID}" STREQUAL "GNU" )
  message( STATUS "Setting the flags for ${CMAKE_C_COMPILER_ID} compiler" )
  add_definitions( --std=c99 )
endif()

# Check for OS
if( UNIX )
    set( ALPHABETIZE_DEFINITIONS
        "${ALPHABETIZE_DEFINITIONS} -Wall -Wextra -Werror -Wno-deprecated-declarations -Wno-unused-parameter -Wno-comment" )
endif()
